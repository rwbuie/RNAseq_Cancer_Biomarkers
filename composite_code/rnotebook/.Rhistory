#======================
# Normalize Expression
#======================
counts.sub <- counts.filt
dge <- DGEList(counts = counts.sub)
samp <- ncol(counts.sub)
#Note: used a minium # of samples as 5 to ensure that normalized values will include all DEGs identified with the training set counts. Higher thresholds lead to genes included in DEGs but excluded in the "master" TMM normalized counts.
keep.dge <- rowSums(cpm(dge) >= 1) >= 5
dge <- dge[keep.dge,] #subset for those genes with cmp >= 1 per gene in AML samples
dge <- calcNormFactors(dge) #Do TMM normalization
dim(dge) # 18243 genes meet these criteria in AML only
cpm <- cpm(dge,log = TRUE, prior.count = 1) # all expression as counts per million at filtered genes
#=================================
# Get Gene Annotations and Ranges
#=================================
# gene annotations and granges objects
edb <- EnsDb.Hsapiens.v75 # columns(edb) to check available annotation info
# example:
# select(edb, keys="TP53", columns=colnames(edb),keytype="SYMBOL")
# head(rownames(counts.filt))
# [1] "ENSG00000000003.13" "ENSG00000000005.5"  "ENSG00000000419.11" "ENSG00000000457.12"
# [5] "ENSG00000000460.15" "ENSG00000000938.11"
# NOTE: ids are transcript ids
# simply use gene-level information for now
genes.edb <- genes(edb)
counts.genes.grdf <- as.data.frame(matrix(ncol=6,nrow=0))
colnames(counts.genes.grdf) <- c("gene.id","gene.symbol","countsdf.id","chr.seqname","start","end")
for(i in 1:nrow(counts.filt)){
gene.info.i = as.data.frame(genes.edb[gsub("\\..*","",rownames(counts.filt)[i])])
counts.genes.grdf <- rbind(counts.genes.grdf,data.frame(gene.id=rownames(gene.info.i)[1],
gene.symbol=gene.info.i$gene_name[1],
countsdf.id=rownames(counts.filt)[i],
chr.seqname=gene.info.i$seqnames,
start=gene.info.i$start,
end=gene.info.i$end,
stringsAsFactors = F))
message(i," perc. complete = ",round(100*(i/nrow(counts.filt)),4),"%")
}
length(intersect(rownames(counts.filt), counts.genes.grdf$countsdf.id)) # 54713
length(intersect(counts.genes.grdf$countsdf.id, rownames(dge))) # 17637
load("~/Documents/GitHub/ConsensusML/composite_code/rnotebook/data/edb_filt_anno.rda")
length(intersect(rownames(counts.filt), counts.genes.grdf$countsdf.id)) # 54713
length(intersect(counts.genes.grdf$countsdf.id, rownames(dge))) # 17637
counts.se <- counts.filt[rownames(counts.filt) %in% counts.genes.grdf$countsdf.id,]
cpm.se <- cpm[rownames(cpm) %in% counts.genes.grdf$countsdf.id,]
dim(cpm.se)
ganno.counts <- counts.genes.grdf[order(match(counts.genes.grdf$countsdf.id,
rownames(counts.se))),]
identical(counts.genes.grdf$countsdf.id, rownames(counts.se))
ganno.tmm <- counts.genes.grdf[counts.genes.grdf$countsdf.id %in% rownames(cpm.se),]
ganno.tmm <- ganno.tmm[order(match(ganno.tmm$countsdf.id,rownames(cpm.se))),]
identical(ganno.tmm$countsdf.id,rownames(cpm.se))
colnames(ganno.counts) <- colnames(ganno.tmm) <- c("gene.id","gene.symbol","countsdf.id","seqnames","start","end")
ggr.counts <- makeGRangesFromDataFrame(ganno.counts,
keep.extra.columns = T,
ignore.strand = T)
names(ggr.counts) <- ggr.counts$countsdf.id
ggr.tmm <- makeGRangesFromDataFrame(ganno.tmm,
keep.extra.columns = T,
ignore.strand = T)
names(ggr.tmm) <- ggr.tmm$countsdf.id
colnames(clinical.filt)
table(clinical.filt$exptset.seahack)
dim(clinical.filt)
dim(counts.se)
table(clinical.filt$Risk.group)
table(clinical.filt$Risk.group,clinical.filt$exptset.seahack)
identical(ggr.counts$countsdf.id, rownames(counts.se)) # TRUE
identical(names(ggr.counts), rownames(counts.se)) # TRUE
identical(substr(colnames(counts.se),11,16),
substr(clinical.filt$TARGET.USI,11,16)) # TRUE
counts.seset <- SummarizedExperiment(assays = as.matrix(counts.se),
rowRanges = ggr.counts,
colData = DataFrame(clinical.filt,
row.names = colnames(counts.se)
),
metadata = list(dataset = "TARGET_AML",
assay_source = "GDC",
genome_build = "hg19")
)
identical(ggr.tmm$countsdf.id, rownames(cpm.se)) # TRUE
identical(names(ggr.tmm), rownames(cpm.se))
identical(substr(colnames(cpm.se),11,16),
substr(clinical.filt$TARGET.USI,11,16)) # TRUE
tmm.seset <- SummarizedExperiment(assays = as.matrix(cpm.se),
rowRanges = ggr.tmm,
colData = DataFrame(clinical.filt,
row.names = colnames(cpm.se)
),
metadata = list(dataset = "TARGET_AML",
assay_source = "GDC",
genome_build = "hg19",
normalization_strategy = "TMM, log_cpm, limma, edgeR"))
# DEG TMM SE object
deglist = rownames(degtable)
length(intersect(deglist, counts.genes.grdf$countsdf.id)) # 1937 of 1998
degfilt = deglist[deglist %in% counts.genes.grdf$countsdf.id]
ggr.deg = ggr.counts[names(ggr.counts) %in% degfilt]
# deg.assay <- counts.se[rownames(counts.se) %in% degfilt,]
deg.assay <- cpm.se[rownames(cpm.se) %in% degfilt,]
ggr.deg <- ggr.deg[order(match(names(ggr.deg), rownames(deg.assay)))]
identical(names(ggr.deg), rownames(deg.assay)) # TRUE
identical(substr(colnames(cpm.se),11,16),
substr(clinical.filt$TARGET.USI,11,16)) # TRUE
# add the deg statistics to gene annotation
degstats = degtable[rownames(degtable) %in% degfilt,]
degstats = degstats[order(match(rownames(degstats), names(ggr.deg))),]
identical(rownames(degstats), names(ggr.deg)) # TRUE
ggr.deg$logFC <- degstats$logFC
ggr.deg$AveExpr <- degstats$AveExpr
ggr.deg$t <- degstats$t
ggr.deg$p.unadj <- degstats$P.Value
ggr.deg$p.adj.bh <- degstats$adj.P.Val
ggr.deg$b <- degstats$B
# make the se object
deg.seset <- SummarizedExperiment(assays = as.matrix(deg.assay),
rowRanges = ggr.deg,
colData = DataFrame(clinical.filt,
row.names = colnames(deg.assay)
),
metadata = list(dataset = "TARGET_AML",
assay_source = "GDC",
genome_build = "hg19",
normalization_strategy = "DEGs_trainset_binaryrisk, Low=0 notLow=1, reference: Low, tmm_log_cpm, voom_DE function"))
save(counts.seset, file=paste0(seobj.dir, sys.sep, countsseset.name))
save(tmm.seset, file=paste0(seobj.dir, sys.sep, tmmseset.name))
save(deg.seset, file=paste0(seobj.dir, sys.sep, degseset.name))
counts.map <- data.frame(primary = colnames(counts.seset),
colname = colnames(counts.seset),
stringsAsFactors = F)
tmm.map <- data.frame(primary = colnames(tmm.seset),
colname = colnames(tmm.seset),
stringsAsFactors = F)
deg.map <- data.frame(primary = colnames(deg.seset),
colname = colnames(deg.seset),
stringsAsFactors = F)
listmap <- list(counts.map, tmm.map, deg.map)
names(listmap) <- c("gene_counts", "tmm_log2norm_filtcounts", "deg_tmm_counts")
dfmap <- listToMap(listmap)
objlist = list("gene_counts" = counts.seset,
"tmm_log2norm_filtcounts" = tmm.seset,
"deg_tmm_counts" = deg.seset)
patient.data <- clinical.filt
rownames(patient.data) <- colnames(counts.se)
targetaml.mae <- MultiAssayExperiment(objlist, patient.data, dfmap)
save(targetaml.mae, file=paste0(seobj.dir, sys.sep, maeobj.name))
load(paste0(seobj.dir, sys.sep, degseset.name))
deg.seset$exptset.seahack
message("dim se object")
dim(deg.seset)
# [1] 1937  145
message("table of risk group var")
table(deg.seset$Risk.group)
#     High      Low Standard  Unknown
#       8       60       69        8
deg.seset$deg.risk <- ifelse(deg.seset$Risk.group=="Low", 0,
ifelse(deg.seset$Risk.group %in% c("Standard","High"),1,"NA"))
message("table of binarized risk group")
table(deg.seset$deg.risk)
# 0  1 NA
# 60 77  8
message("table of risk group x binarized risk group")
table(deg.seset$deg.risk, deg.seset$Risk.group)
#       High Low Standard Unknown
#  0     0  60        0       0
#  1     8   0       69       0
#  NA    0   0        0       8
degfilt.se <- deg.seset[,which(deg.seset$deg.risk %in% c(0,1))] # subset on deg risk group available
message("dim of filtered se object")
dim(degfilt.se)
# [1] 1937  137
# summarize gender and age at first diagnosis
message("table of gender x binarized risk")
table(degfilt.se$Gender,degfilt.se$deg.risk)
#           0  1
#   Female 29 40
#   Male   31 37
message("chisq test of gender x binarized risk")
chisq.test(table(degfilt.se$Gender,degfilt.se$deg.risk)) # p-value = 0.8044, gender evenly dist
degfilt.se$binom.age <- ifelse(degfilt.se$Age.at.Diagnosis.in.Days >= median(degfilt.se$Age.at.Diagnosis.in.Days), "old" ,"young")
message("table of binarized age-at-diag x binarized risk")
table(degfilt.se$binom.age,degfilt.se$deg.risk)
#         0  1
#  old   32 37
#  young 28 40
message("chisq results of binarized age-at-diag x binarized risk")
chisq.test(table(degfilt.se$binom.age,degfilt.se$deg.risk)) #  p-value = 0.6591, age evenly dist
hm.se.train <- degfilt.se[,degfilt.se$exptset.seahack=="train"]
hm.se.train <- degfilt.se[,degfilt.se$exptset.seahack=="train"]
hm_data.train <- as.matrix(assay(hm.se.train)[!is.na(lfc.deg),])
seset <- degfilt.se[,degfilt.se$exptset.seahack=="test"]
hm_data.test <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.test <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.test <- Heatmap(hm_data.test,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.test,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Test",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
draw(hm.test+hm.train)
seset <- degfilt.se[,degfilt.se$exptset.seahack=="train"]
hm_data.train <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.train <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.train <- Heatmap(hm_data.train,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.train,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Train",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
draw(hm.test+hm.train)
hmdeg.traintest.name <- "hmdeg_traintest_targetaml.jpg"
jpeg(paste0(figs.dir, sys.sep, hmdeg.traintest.name), 15, 5, units="in", res=400)
draw(hm.test+hm.train)
dev.off()
hm_data <- as.matrix(log2(assay(degfilt.se)+0.01))
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=degfilt.se$deg.risk,
gender=degfilt.se$Gender,
binom.age=degfilt.se$binom.age,
subset=degfilt.se$exptset.seahack),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green"),
subset = c("test" = "orange", "train" = "purple")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks,colorRampPalette(c("green","black","red"))(n=length(breaks)))
hm <- Heatmap(hm_data,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno,
name="log2_tmm_count",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Samples",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
jpeg(paste0(figs.dir, sys.sep, hmdeg.name), 10, 7, units="in", res=400)
hm
dev.off()
hm_data <- as.matrix(assay(degfilt.se))
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=degfilt.se$deg.risk,
gender=degfilt.se$Gender,
binom.age=degfilt.se$binom.age,
subset=degfilt.se$exptset.seahack),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green"),
subset = c("test" = "orange", "train" = "purple")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks,colorRampPalette(c("green","black","red"))(n=length(breaks)))
hm <- Heatmap(hm_data,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno,
name="log2_tmm_count",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Samples",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
jpeg(paste0(figs.dir, sys.sep, hmdeg.name), 10, 7, units="in", res=400)
hm
dev.off()
require(ComplexHeatmap)
require(circlize)
#=======================
# Heatmap Test vs Train
#=======================
# all data
seset <- degfilt.se
hm_data <- as.matrix(assay(seset))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks, colorRampPalette(c("green","black","red"))(n=length(breaks)))
# train data
seset <- degfilt.se[,degfilt.se$exptset.seahack=="train"]
hm_data.train <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.train <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.train <- Heatmap(hm_data.train,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.train,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Train",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
# test data
seset <- degfilt.se[,degfilt.se$exptset.seahack=="test"]
hm_data.test <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.test <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.test <- Heatmap(hm_data.test,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.test,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Test",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
jpeg(paste0(figs.dir, sys.sep, hmdeg.traintest.name), 15, 5, units="in", res=400)
draw(hm.test+hm.train)
dev.off()
#==================
# Heatmap All Data
#==================
# Take normally dist data as heatmap matrix
hm_data <- as.matrix(assay(degfilt.se))
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=degfilt.se$deg.risk,
gender=degfilt.se$Gender,
binom.age=degfilt.se$binom.age,
subset=degfilt.se$exptset.seahack),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green"),
subset = c("test" = "orange", "train" = "purple")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks,colorRampPalette(c("green","black","red"))(n=length(breaks)))
hm <- Heatmap(hm_data,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno,
name="log2_tmm_count",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Samples",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
jpeg(paste0(figs.dir, sys.sep, hmdeg.name), 10, 7, units="in", res=400)
hm
dev.off()
# transverse heatmap with log2FC
require(ComplexHeatmap)
require(circlize)
#=======================
# Heatmap Test vs Train
#=======================
# all data
seset <- degfilt.se
hm_data <- as.matrix(assay(seset))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks, colorRampPalette(c("green","black","red"))(n=length(breaks)))
# train data
seset <- degfilt.se[,degfilt.se$exptset.seahack=="train"]
hm_data.train <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.train <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.train <- Heatmap(hm_data.train,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.train,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Train",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
# test data
seset <- degfilt.se[,degfilt.se$exptset.seahack=="test"]
hm_data.test <- as.matrix(assay(seset)[!is.na(lfc.deg),])
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno.test <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=seset$deg.risk,
gender=seset$Gender,
binom.age=seset$binom.age),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5), "cm"))
hm.test <- Heatmap(hm_data.test,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno.test,
name="tmm_log_cpm",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Test",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
draw(hm.test+hm.train)
#jpeg(paste0(figs.dir, sys.sep, hmdeg.traintest.name), 15, 5, units="in", res=400)
#draw(hm.test+hm.train)
#dev.off()
#==================
# Heatmap All Data
#==================
# Take normally dist data as heatmap matrix
hm_data <- as.matrix(assay(degfilt.se))
# hm col annotations can contain complex layered output and colored annotaions
hm_colanno <- HeatmapAnnotation(show_legend = TRUE,
df = data.frame(sampletype=degfilt.se$deg.risk,
gender=degfilt.se$Gender,
binom.age=degfilt.se$binom.age,
subset=degfilt.se$exptset.seahack),
col = list(sampletype = c("0" =  "blue","1" = "red"),
gender = c("Male"="black","Female"="gray"),
binom.age = c("young"="pink","old"="green"),
subset = c("test" = "orange", "train" = "purple")),
name = "Sample Type",
annotation_height = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
breaks=seq(min(hm_data),max(hm_data),0.1)
hmcol = colorRamp2(breaks,colorRampPalette(c("green","black","red"))(n=length(breaks)))
hm <- Heatmap(hm_data,
col=hmcol,
cluster_columns = TRUE,
show_heatmap_legend = TRUE,
top_annotation = hm_colanno,
name="log2_tmm_count",
show_row_names = FALSE,
show_column_names = FALSE,
column_title = "Samples",
column_dend_reorder = TRUE,
row_dend_reorder = TRUE,
heatmap_legend_param = list(color_bar = "continuous"),
row_title = "DEGs")
hm
#jpeg(paste0(figs.dir, sys.sep, hmdeg.name), 10, 7, units="in", res=400)
#hm
#dev.off()
# transverse heatmap with log2FC
